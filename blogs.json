{
  "version": "https://jsonfeed.org/version/1",
  "title": "Stories by Sunny Dhama on Medium",
  "home_page_url": "https://medium.com/@dhamasunny98?source=rss-1e6fdae09b0a------2",
  "description": "Stories by Sunny Dhama on Medium",
  "author": {
    "name": "yourfriends@medium.com"
  },
  "items": [
    {
      "guid": "https://medium.com/p/9df7856483a2",
      "url": "https://medium.com/@dhamasunny98/install-docker-on-windows-10-home-9df7856483a2?source=rss-1e6fdae09b0a------2",
      "title": "Install docker on Windows 10 Home",
      "content_html": "<h3>How to get started</h3><p>Have Windows Home and still want to install Docker? Don’t worry I got you covered!</p><h3>Step-1</h3><p>Make a docket.bat file, right click on it and Edit with your preffered code editor and paste the following :</p><pre>pushd &quot;%~dp0&quot;<br>dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum &gt;hyper-v.txt<br>for /f %%i in (&#39;findstr /i . hyper-v.txt 2^&gt;nul&#39;) do dism /online /norestart /add-package:&quot;%SystemRoot%\\servicing\\Packages\\%%i&quot;<br>del hyper-v.txt<br>Dism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALL<br>pause</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1017/0*CXVSwgVn_FT62a0I.png\" /></figure><p>IMPORTANT RESTART!</p><h3>Step-2</h3><p>Hit Windows-Key + R and type regedit, hit enter</p><p>Now navigate to HKEY_LOCAL_MACHINE &gt; SOFTWARE &gt; Microsoft &gt; Windows NT &gt; CurrentVersion</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LmAKzroq4l7U8aDt.png\" /></figure><p>IMPORTANT DO NOT RESTART</p><h3>Step-3</h3><p>Edit EditionID and ProductName to the following:</p><p>NOTE Note down the default keys, you will need them after install!</p><p>IMPORTANT DO NOT RESTART</p><h3>Step-4</h3><p>You are all set, now continue with docker Installation and remember to changes keys back to normal.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9df7856483a2\" width=\"1\" height=\"1\" alt=\"\">",
      "date_published": "2024-02-23T20:59:36.000Z",
      "author": {
        "name": "Sunny Dhama"
      }
    },
    {
      "guid": "https://medium.com/p/85b6489642fe",
      "url": "https://medium.com/@dhamasunny98/text-transition-using-vanilla-js-85b6489642fe?source=rss-1e6fdae09b0a------2",
      "title": "Text transition using Vanilla JS",
      "content_html": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KC4qzWHUQESOt2XU.png\" /></figure><p>Ever since I used a text effect on my portfolio website, many peers have asked me of what module did I use to acheive the effect of text transition there? But the truth is, I didn��t. There was no need, as the implementation is easy itself. You can check out my portfolio website to know what effect I am talking about.</p><p>Well, in this post, we are going to learn how to create a text transition effect using vanilla JS and CSS for yourself. To get an idea about what we will be creating take a look at this</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*gpkO1xMstbHA075A.gif\" /></figure><p>For this tutorial, we will use three files — index.html, style.css &amp; script.js.</p><p>Contents of the index.html file</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;<br>    &lt;title&gt;JS Text Transition&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;!-- Element where we will display the text --&gt;<br>    &lt;p id=&#39;heading&#39; class=&#39;&#39;&gt;&lt;/p&gt;<br>    &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre><p>A minimal HTML file, with links to style.css and script.js. Also, we created a paragraph element with id ‘heading’, which we will be targeting for text insertion and updation using JavaScript.</p><p>Contents of the style.css file</p><pre>p {<br>    /* Style it as you want */<br>    position: fixed;<br>    top: 50%;<br>    left: 50%;<br>    margin: 0px;<br>    transform: translate(-50%, -50%);<br>    font-family: &#39;Montserrat&#39;;<br>    font-weight: 400;<br>    font-size: 5em;<br>    color: rgb(60, 60, 60);</pre><pre>    /* Necessary styles */<br>    opacity: 1;<br>    transition: 0.2s linear;<br>}</pre><pre>.invisible {<br>    opacity: 0;<br>}</pre><p>The style rules for the paragraph elements. Not all rules are necessary, only the opacity and transition rules are needed for this method to work. Also, the invisible class changes the element’s opacity to 0. Initially the opacity is 1, which means that it is completely visible. When the opacity is set to 0, the element becomes completely transparent.</p><p><strong>Note:</strong> I have installed Montserrat font on my system, so there was no need to import it, but if you want to use Montserrat, and don’t have it installed, you can visit here to get it.</p><p>Contents of the script.js file</p><pre>// Values we want to display<br>let text = [&#39;Apple&#39;, &#39;Mango&#39;, &#39;Orange&#39;, &#39;Watermelon&#39;]</pre><pre>// index of the next element we want to display<br>let currentIndex = 1</pre><pre>window.onload = function () {<br>    let paragraph = document.getElementById(&#39;heading&#39;)<br>    // Set the innerHTML to first value<br>    paragraph.innerHTML = text[0]</pre><pre>    setInterval(function() {<br>        //  Fade out our element<br>        paragraph.className = &#39;invisible&#39;</pre><pre>        setTimeout(function() {<br>            paragraph.innerHTML = text[currentIndex]</pre><pre>            // Circular incrementation of currentIndex variable<br>            currentIndex = ( currentIndex + 1 ) % text.length</pre><pre>            setTimeout(function() {<br>                // Fade in our element<br>                paragraph.className = &#39;&#39;<br>            }, 50)<br>        }, 200)<br>    }, 3000)<br>}</pre><p><strong>Explaination</strong> The text variable contains an array of all the strings we wish to display in the target element. Also we set the currentIndex variable to 1, as we will be inserting the first element ( indexed 0 ) of text variable manually.</p><p>Then we use the onload property of window object, to trigger our transition function as soon as the document has finished loading. We target the element where we want to display our strings as paragraph, and set it’s innerHTML property to text[0] i.e. the first element of the text array.</p><p>Then we create an interval which calls a function every 3000 milliseconds i.e. 3 seconds. This is the time for which the text will be shown to the user. At the start of the interval, we add an invisible class to our element. As per the transition CSS rule of the element, it will take our element 200 milliseconds to completely fade out, so we set a timeout of 200 milliseconds to wait for our element to completely fade out, and then we change the innerHTML to next value of text.</p><p>We also set the currentIndex to the next element in a circular manner. We want it to iterate circularly, so we add a modulus operator after the increment. Our text array has a length of 4, so the currentIndex can take values 0, 1, 2, 3. When the currentIndex value is 3, after the next increment, it becomes 4, which is out of bounds for our array, so we use ‘%’ operator, which returns the remainder. So 4%4 becomes 0, and we start from there again.</p><p>For this operation, we give it a timeout of 50 milliseconds ( more than needed ). Then we set the className property to an empty string i.e. we remove the invisible class. Now, paragraph element’s opacity becomes 1, and due to transition time being 200 milliseconds, it slowly fades in in 200 milliseconds.</p><p>As we used setInterval function, the function will be called infinitely, but if you intend to stop the animation, you can using the following method.</p><pre>// Create our interval, and store it in a variable<br>let interval = setInterval(...)</pre><pre>// Remove the interval using clearInterval()<br>clearInterval(interval)</pre><p>That’s it, now you’ve created your own text transition effect using Vanilla JS and CSS. If you face any difficulties, or have any improvements to share, you can comment down below. Thank you for your time!</p><p>Adios folks!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=85b6489642fe\" width=\"1\" height=\"1\" alt=\"\">",
      "date_published": "2024-02-23T20:58:52.000Z",
      "author": {
        "name": "Sunny Dhama"
      }
    },
    {
      "guid": "https://medium.com/p/1fa76e354598",
      "url": "https://medium.com/@dhamasunny98/what-if-i-am-not-good-at-coding-1fa76e354598?source=rss-1e6fdae09b0a------2",
      "title": "What if I am not good at coding?",
      "content_html": "<p>The constant struggle — lack of self-esteem Many times, I find people confusing skill with talent. Skill is something one acquires by perseverance, hard work and a lot of practise. It is then when someone becomes Skilled. On the other hand, talent, is something one is born with. It is their natural aptitude. It is true that people with talent are better at doing things, as compared to other people, but it should also be known that their expertise due to talent can be surpassed with constant practise and hard work.</p><p>How am I able to code well? Same goes for the huge number of people who are far better then me. How are they so good? The answer is simple — Practise. Computer programming is just like speaking multiple languages — you just translate your ideas into code. If you can speak more than one language, then surely, you can code.</p><p>Also, a reason for less self esteem may be an experience of a series of failures. The failures need not be large, even small ones are enough to break your confidence. But the one who stands through all of this, is the one who succeeds. You can also check out my other blog post, which intends to help you to decide how to start with Computer Programming.</p><p>If you checked it out, you may know, that there’s no hard and fast way of acheiving success overnight. No one can do that. Even God wasn’t able to create the World overnight. He took 7 days to do so. Compared to him, we are just Humans, so obviously we would need more time.</p><p>The last point I would like to make, is that one needs to trust in oneself, if he intends to be successful. Without self-trust, people who are successful right now, would’ve left their positions the moment they faced difficulties. In order to learn something well, you need patience. Patience to sit and try something, and fail innumerable times, until you succeed. You need to become the best at what you do. This is a more general topic, it’s not just limited to Computer Programming.</p><h4>“Genius is one percent inspiration, and ninety-nine percent perspiration.”</h4><h4>— Thomas Edison</h4><p>For any questions, you can always contact me through mail, or any of my social handles 😄. Also leave a comment for any suggestion.</p><p>I’ll wrap this up with this. Thanks for your time!</p><p>Adios Folks!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1fa76e354598\" width=\"1\" height=\"1\" alt=\"\">",
      "date_published": "2024-02-23T20:57:58.000Z",
      "author": {
        "name": "Sunny Dhama"
      }
    },
    {
      "guid": "https://medium.com/p/fb2fe9fb16b0",
      "url": "https://medium.com/@dhamasunny98/how-to-get-started-fb2fe9fb16b0?source=rss-1e6fdae09b0a------2",
      "title": "How to get Started",
      "content_html": "<h3>How to get started</h3><p>Hey everyone! I hope everything’s going great! Today we’re going to discuss the “Right Way” to begin your journey in the domain of Computer Programming.</p><p>First of all, let’s make it clear — There’s no hard written way of succeeding in anything. I just happens with sheer willpower, perseverance and hard work. Also there is NO shortcut. You have to take every step on the ‘ladder of success’ — there’s no skipping. Aye, you may learn from other people’s mistakes and experiences, but make sure that you have your own experiences too, and also make your own mistakes.</p><h4>“Failure is not in falling, but in not rising up again”.</h4><p>The way, or workflow which I’ll be discussing here is the one I found out to be really effective. Undoubtedly, there are many other ways, some more effective, and some less. But everything is good if it helps you further yourself towards your goal.</p><p>Choosing your first language Choosing your first language wisely is really important. Because you will do a lot of preliminary and basic stuff using your first language. A good tip for selecting your first programming language would be to select a compiled language like C, C++, Java, etc. Most of compiled languages, for e.g. C, are closer to the system. C doesn’t do a lot of stuff for us; for example, implementing dynamic arrays ( arrays with variable size ) in C is not so easy. But in interpreted languages, like Python, dynamic arrays are a part of the language ( called ‘lists’ ).</p><p>The language which I would recommend for first-timers would be C. It has a flatter learning curve than Java and is similar to C++, but helps you in learning many of the concepts ( not including Object Oriented Programming ). You can also use C for Competitive Programming, as it is comparatively faster than other languages. Also, as it is a language that is ‘closer to the computer system and hardware’, we are also able to understand the working of the system.</p><p>After you are well comfortable with C, you may move on to C++ or Java.</p><p>Good Logic The truth is, learning a programming language is really simple. It is simply a construct of words and symbols, which when placed correctly will create a good output. Here, “correct” is a subjective matter. With good Logic, you can create beautiful poetries out of your code. A simple example would be swapping 2 numbers stored in a and b. The simplest method one can think of is to create a temporary variable c and use it as following:</p><pre>c = a<br>a = b<br>b = c</pre><p>But what if we can do this, but without a 3rd variable? There are some methods, like in the following trick, we use addition and subtraction to manipulate the values.</p><pre>a = a + b # a gets value &#39;a+b&#39;<br>b = a - b # b gets value &#39;a+b-b&#39;, i.e. &#39;a&#39;<br>a = a - b # a gets value &#39;a+b-a&#39;, i.e. &#39;b&#39;<br># So, in the end, the values are swapped.<br># To get a better understanding of this, use a pen and paper, and<br># try to work it out yourself.</pre><p>Similarly, in other operations, you can write better code with better Logic. So first step would be to improve your logic, and train your brain to approach a problem from a technological point of view.</p><p>How to improve Logic? Here comes in Competitive Programming ( or Sport Programming ). Competitive programming has a large community, and is still growing at a huge rate. There is an ocean of questions, problems and competitions available on the internet now. There are various sites for the same, like Hackerrank, Codechef, etc. You can solve some problems without using advanced concepts, but some problems do require them. You also need to practise Data Structures and Algorithms. Competitive Programming ‘forces’ you to think of the most optimal solution, and before long, your brain will be trained to think of an optimal solution wherever possible.</p><h4>“With great Logic, comes great Code.”</h4><p>A good way to slowly improve your thinking, is to solve atleast 1–2 problems everyday. After 2–3 months, you will have a greater understanding of the problems, and the solving strategies.</p><p>Moving further By the time you decide to move further, you should have developed a good logic, and would be proficient with 2–3 languages. From this point on, it will be a cakewalk. Learning a new language will be really easy. Now, the important part is — “What you want to do in your life?”</p><p>Computer Programming expands into a lot of huge fields further, like Web Development, App Development, Machine Learning, AI, Computer Vision, etc. It’s upto you to find out what you love to do.</p><h4>“The only way to do great work, is to love what you do.”</h4><h4>— Steve Jobs</h4><p>I’ll wrap up this post with this now, thank you for giving your time!</p><p>Adios Folks!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fb2fe9fb16b0\" width=\"1\" height=\"1\" alt=\"\">",
      "date_published": "2024-02-23T20:57:23.000Z",
      "author": {
        "name": "Sunny Dhama"
      }
    }
  ]
}